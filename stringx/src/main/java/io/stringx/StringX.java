package io.stringx;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.os.Build;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.util.DisplayMetrics;

import java.util.List;
import java.util.Locale;

/**
 * <a href="https://www.stringx.io">stringX</a> SDK for automatic app translations
 * stringX library mimics translated resources with native translations by forcing locale
 * and letting user choose to use them as app translation or fallback to default app language
 * Translations are generated by the
 * <a href="https://play.google.com/store/apps/details?id=io.stringx">stringX App</a>
 * available in Google Play.
 */
public class StringX implements StringXLanguageReceiver.OnLanguageChanged {
    private static final String PREFERENCE_NAME = "StringX";
    private static final String KEY_LANGUAGE_ENABLED = "KEY_ENABLED_";
    private static final String KEY_OPT_OUT = "KEY_OPTED_OUT";
    private final Options options;
    private boolean isLanguageSupported;
    private SharedPreferences preferences;
    private Locale defaultLocale;
    private boolean isTranslationChecked;
    @Nullable
    private Locale locale;
    private TranslationListener listener;
    private boolean isForcingDefaultLocale;

    /**
     * Constructs single entry point for stringX SDK
     *
     * @param options configuration of the library, see {@link Options}
     */
    public StringX(Options options) {
        Context context = options.getContext();
        this.options = options;
        defaultLocale = Locale.getDefault();
        try {
            preferences = context.getSharedPreferences(PREFERENCE_NAME, Context.MODE_PRIVATE);
            StringXLanguageReceiver.from(context).addListener(this);
            isLanguageSupported = true;
            forceDefault(context);
        } catch (UnsupportedLanguageException e) {
            SXLog.e("Unsupported locale" + defaultLocale.getDisplayLanguage() + "-" + defaultLocale.getDisplayCountry(), e);
            if (listener != null) {
                listener.onLanguageNotSupported(defaultLocale);
            }
        }
    }

    /**
     * Call this method to receive stringX instance
     *
     * @return {@link StringX} instance
     * @throws IllegalStateException if stringX is not initialised.
     *                               See <a href="https://www.stringx.io/docs/guides">integration guide</a>
     */
    public static StringX get(@NonNull Context context) {
        if (isInitialised(context)) {
            return ((Translatable) context.getApplicationContext()).getStringX();
        } else {
            throw new IllegalStateException("StringX is not initialised. Follow instructions here https://www.stringx.io/docs/guides");
        }
    }

    private static boolean isInitialised(Context context) {
        Context applicationContext = context.getApplicationContext();
        return applicationContext instanceof Translatable &&
                ((Translatable) applicationContext).getStringX() != null;
    }

    /**
     * Forces {@link Locale} on the given context
     *
     * @param context can be Application Context or Activity, depending on what scope changes should take
     * @param locale  {@link Locale} to force
     */
    public Context forceLocale(Context context, @Nullable Locale locale) {
        return forceLocale(context, locale, false);
    }

    /**
     * Verifies, whether translation is supported and if user should be prompted
     * to turn on automatic translation
     *
     * @param activity
     */
    public void onResume(Activity activity) {
        try {
            if (isTranslationChecked ||
                    !isTranslationAvailable() ||
                    isEnabled() ||
                    isOptOut()) {
                isTranslationChecked = true;
                return;
            }
        } catch (UnsupportedLanguageException e) {
            SXLog.w("Unsupported device language!");
            return;
        }
        isTranslationChecked = true;
        showTranslationHint(activity);
    }

    /**
     * {@link Options} of the library
     *
     * @return options under which library is configured
     */
    public Options getOptions() {
        return options;
    }

    /**
     * Restarts the application to apply the changes made on application context
     */
    public void restart() {
        options.getRestartStrategy().restart();
    }

    boolean isTranslationAvailable() {
        try {
            return isLanguageSupported && getOptions().getAutoTranslatedLanguages().contains(getDeviceLanguage());
        } catch (UnsupportedLanguageException e) {
            return false;
        }
    }

    void forceDefault(Context context) throws UnsupportedLanguageException {
        boolean translationAvailable = isTranslationAvailable();
        boolean enabled = isEnabled();
        if (translationAvailable && !enabled) {
            forceLocale(context, getAppDefaultLanguage().toLocale(), true);
        }
    }

    TranslationListener getListener() {
        return listener;
    }

    /**
     * Registers for translation events, See {@link TranslationListener}
     *
     * @param listener
     */
    public void setListener(TranslationListener listener) {
        this.listener = listener;
    }

    private Context forceLocale(Context context, @Nullable Locale locale, boolean isDefault) {
        if (locale == null) {
            return context;
        }
        SXLog.d("Forcing " + locale.getDisplayLanguage());
        isForcingDefaultLocale = isDefault;
        Resources res = context.getResources();
        Locale.setDefault(locale);
        Configuration config = new Configuration(res.getConfiguration());
        if (Build.VERSION.SDK_INT >= 17) {
            config.setLocale(locale);
            context = context.createConfigurationContext(config);
        } else {
            config.locale = locale;
            res.updateConfiguration(config, res.getDisplayMetrics());
        }

        this.locale = locale;
        return context;
    }

    boolean isForcingLocale() {
        return !isForcingDefaultLocale && locale != null && !locale.equals(defaultLocale);
    }

    boolean isEnabled() throws UnsupportedLanguageException {
        return preferences.getBoolean(getPreferenceKey(), false);
    }

    /**
     * Enables translation for current {@link Locale}
     *
     * @param isEnabled
     */
    public void setEnabled(boolean isEnabled) {
        try {
            preferences
                    .edit()
                    .putBoolean(getPreferenceKey(), isEnabled)
                    .apply();
        } catch (UnsupportedLanguageException e) {
            SXLog.w("Couldn't toggle translation. Language is not supported!");
        }
    }

    private boolean isOptOut() {
        return preferences.getBoolean(KEY_OPT_OUT, false);
    }

    /**
     * Turns off stringX translations
     *
     * @param isOptOut
     */
    public void setOptOut(boolean isOptOut) {
        preferences
                .edit()
                .putBoolean(KEY_OPT_OUT, isOptOut)
                .apply();
    }

    private String getPreferenceKey() throws UnsupportedLanguageException {
        return KEY_LANGUAGE_ENABLED + getDeviceLanguage().getCode();
    }

    private void showTranslationHint(Activity activity) {
        Intent intent = new Intent(activity, StringXOverlayActivity.class);
        activity.startActivityForResult(intent, StringXOverlayActivity.REQUEST_CODE);
    }

    List<Language> getSupportedLanguages() {
        return options.getSupportedLanguages();
    }

    @Override
    public void onLanguageChanged(Language language) {
        defaultLocale = language.toLocale();
        isTranslationChecked = false;
    }

    Language getDeviceLanguage() throws UnsupportedLanguageException {
        return Language.fromLocale(defaultLocale);
    }

    Language getAppDefaultLanguage() {
        return getOptions().getDefaultLanguage();
    }

    /**
     * Notifies about translation events. Useful eg. for analytics
     */
    public interface TranslationListener {

        /**
         * Notifies that the user closed the pop-up to turn on translation
         */
        void onTranslationCanceled();

        /**
         * Notifies that the user opted out from automatic translation for his locale
         */
        void onTranslationDisabled();

        /**
         * Notifies that the user switched to automatic translations
         */
        void onTranslationEnabled();

        /**
         * Notifies that current {@link Locale} is not supported
         */
        void onLanguageNotSupported(Locale defaultLocale);
    }
}
